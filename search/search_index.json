{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Heurist Pipeline # Commands # heurist download -f [file] - Load records from Heurist into a DuckDB file. heurist record -t [record-type] - Export records of a certain type in a JSON file. heurist schema -t [output-type] - Transform and load Heurist schema. mkdocs -h - Print help message and exit. Project layout # heurist/ api/ # Python client for Heurist API cli/ # Commands for CLI tool converters/ # Methods and functions for transforming Heurist data database/ # DuckDB database for loading data mock_data/ # Examples of data structures exported from Heurist API models/ # Pydantic models for parsing exported Heurist data schema/ # Tools for transforming database structure into schema documentation sql/ # SQL scripts for manipulating and transforming Heurist data","title":"Home"},{"location":"#heurist-pipeline","text":"","title":"Heurist Pipeline"},{"location":"#commands","text":"heurist download -f [file] - Load records from Heurist into a DuckDB file. heurist record -t [record-type] - Export records of a certain type in a JSON file. heurist schema -t [output-type] - Transform and load Heurist schema. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"heurist/ api/ # Python client for Heurist API cli/ # Commands for CLI tool converters/ # Methods and functions for transforming Heurist data database/ # DuckDB database for loading data mock_data/ # Examples of data structures exported from Heurist API models/ # Pydantic models for parsing exported Heurist data schema/ # Tools for transforming database structure into schema documentation sql/ # SQL scripts for manipulating and transforming Heurist data","title":"Project layout"},{"location":"development/code_of_conduct/","text":"","title":"Code of Conduct"},{"location":"development/contributing/","text":"Contributing File # VS Code settings # { \"[python]\": { \"editor.codeActionsOnSave\": { \"source.organizeImports\": true }, \"editor.formatOnSave\": true, \"editor.defaultFormatter\": \"ms-python.black-formatter\" }, \"flake8.args\": [ \"--max-line-length\", \"88\", \"--extend-ignore\", \"E203\" ], \"black-formatter.args\": [ \"--line-length\", \"88\" ], \"isort.args\": [ \"--line_length\", \"88\", \"--wrap-length\", \"88\" ], \"editor.defaultFoldingRangeProvider\": \"ms-python.black-formatter\", \"isort.check\": true } Dependency / publishing manager # Install poetry . pip install --upgrade pip pip install poetry Using poetry, install the package for development. poetry install Linting # poetry run flake8 $ poetry run flake8 --extend-exclude ./examples --max-line-length 88 ./heurist/examples/file/single.py:8:89: E501 line too long (120 > 88 characters) ./heurist/examples/geo/single.py:16:89: E501 line too long (79411 > 88 characters) Testing # poetry run pytest $ poetry run pytest ===================== test session starts ===================== platform darwin -- Python 3.12.2, pytest-8.3.4, pluggy-1.5.0 rootdir: /Users/kellychristensen/Dev/LostMa/heurist-api configfile: pytest.ini testpaths: tests, heurist/src plugins: anyio-4.8.0 collected 50 items tests/integration/dump_test.py . [ 2%] tests/unit/api_client/client_test.py .... [ 10%] tests/unit/database/database_test.py . [ 12%] tests/unit/database/modeling_test.py . [ 14%] tests/unit/database/skeleton_test.py . [ 16%] tests/unit/heurist_transformers/detail_converter_test.py ....... [ 30%] tests/unit/heurist_transformers/dynamic_pydantic_data_field_test.py .... [ 38%] .. [ 42%] tests/unit/heurist_transformers/prepare_records_test.py ........ [ 58%] tests/unit/heurist_transformers/record_modeler_test.py ...... [ 70%] heurist/src/api_client/client.py F. [ 74%] heurist/src/api_client/url_builder.py ... [ 80%]","title":"Contributing"},{"location":"development/contributing/#contributing-file","text":"","title":"Contributing File"},{"location":"development/contributing/#vs-code-settings","text":"{ \"[python]\": { \"editor.codeActionsOnSave\": { \"source.organizeImports\": true }, \"editor.formatOnSave\": true, \"editor.defaultFormatter\": \"ms-python.black-formatter\" }, \"flake8.args\": [ \"--max-line-length\", \"88\", \"--extend-ignore\", \"E203\" ], \"black-formatter.args\": [ \"--line-length\", \"88\" ], \"isort.args\": [ \"--line_length\", \"88\", \"--wrap-length\", \"88\" ], \"editor.defaultFoldingRangeProvider\": \"ms-python.black-formatter\", \"isort.check\": true }","title":"VS Code settings"},{"location":"development/contributing/#dependency-publishing-manager","text":"Install poetry . pip install --upgrade pip pip install poetry Using poetry, install the package for development. poetry install","title":"Dependency / publishing manager"},{"location":"development/contributing/#linting","text":"poetry run flake8 $ poetry run flake8 --extend-exclude ./examples --max-line-length 88 ./heurist/examples/file/single.py:8:89: E501 line too long (120 > 88 characters) ./heurist/examples/geo/single.py:16:89: E501 line too long (79411 > 88 characters)","title":"Linting"},{"location":"development/contributing/#testing","text":"poetry run pytest $ poetry run pytest ===================== test session starts ===================== platform darwin -- Python 3.12.2, pytest-8.3.4, pluggy-1.5.0 rootdir: /Users/kellychristensen/Dev/LostMa/heurist-api configfile: pytest.ini testpaths: tests, heurist/src plugins: anyio-4.8.0 collected 50 items tests/integration/dump_test.py . [ 2%] tests/unit/api_client/client_test.py .... [ 10%] tests/unit/database/database_test.py . [ 12%] tests/unit/database/modeling_test.py . [ 14%] tests/unit/database/skeleton_test.py . [ 16%] tests/unit/heurist_transformers/detail_converter_test.py ....... [ 30%] tests/unit/heurist_transformers/dynamic_pydantic_data_field_test.py .... [ 38%] .. [ 42%] tests/unit/heurist_transformers/prepare_records_test.py ........ [ 58%] tests/unit/heurist_transformers/record_modeler_test.py ...... [ 70%] heurist/src/api_client/client.py F. [ 74%] heurist/src/api_client/url_builder.py ... [ 80%]","title":"Testing"},{"location":"development/coverage/","text":"Badges # coverage (install independently), ^7.6 genbadge (install insependently), ^1.1 pip install genbadge[all] Coverage badge: coverage run -m pytest coverage xml genbadge coverage -i coverage.xml mv coverage-badge.svg ./docs/assets rm coverage.xml Tests badge: pytest --junitxml=reports/junit/junit.xml genbadge tests mv tests-badge.svg ./docs/assets","title":"Coverage"},{"location":"development/coverage/#badges","text":"coverage (install independently), ^7.6 genbadge (install insependently), ^1.1 pip install genbadge[all] Coverage badge: coverage run -m pytest coverage xml genbadge coverage -i coverage.xml mv coverage-badge.svg ./docs/assets rm coverage.xml Tests badge: pytest --junitxml=reports/junit/junit.xml genbadge tests mv tests-badge.svg ./docs/assets","title":"Badges"},{"location":"development/publishing/","text":"Publishing Versions # I found this blog helpful. Configure PyPI authentication # If you haven't already, configure your PyPI authentication using your API key for that package. poetry config repositories.test-pypi https://test.pypi.org/legacy/ poetry config pypi-token.test-pypi pypi-YYYYYYYY Tests # When you're ready to publish a new version of the package to PyPI, run all the tests. poetry run pytest Update # Lock in any changes that have been made to the package's scripts and/or dependencies. poetry lock Update the package version. poetry version prerelease # or poetry version patch # or poetry version minor # or poetry version major Commit # With a message indicating the new version (i.e. v0.0.0 ) updated in the pyproject.toml , commit the file's changes. git add pyproject.toml git commit -m \"bump v0.0.0\" Build a distribution of the package with the new version name. poetry build Push & Publish # Tag and push the commit to GitHub. git tag v0.0.0 git push origin v0.0.0 Publish the committed package to PyPI. poetry publish -r test-pypi","title":"Publishing"},{"location":"development/publishing/#publishing-versions","text":"I found this blog helpful.","title":"Publishing Versions"},{"location":"development/publishing/#configure-pypi-authentication","text":"If you haven't already, configure your PyPI authentication using your API key for that package. poetry config repositories.test-pypi https://test.pypi.org/legacy/ poetry config pypi-token.test-pypi pypi-YYYYYYYY","title":"Configure PyPI authentication"},{"location":"development/publishing/#tests","text":"When you're ready to publish a new version of the package to PyPI, run all the tests. poetry run pytest","title":"Tests"},{"location":"development/publishing/#update","text":"Lock in any changes that have been made to the package's scripts and/or dependencies. poetry lock Update the package version. poetry version prerelease # or poetry version patch # or poetry version minor # or poetry version major","title":"Update"},{"location":"development/publishing/#commit","text":"With a message indicating the new version (i.e. v0.0.0 ) updated in the pyproject.toml , commit the file's changes. git add pyproject.toml git commit -m \"bump v0.0.0\" Build a distribution of the package with the new version name. poetry build","title":"Commit"},{"location":"development/publishing/#push-publish","text":"Tag and push the commit to GitHub. git tag v0.0.0 git push origin v0.0.0 Publish the committed package to PyPI. poetry publish -r test-pypi","title":"Push &amp; Publish"},{"location":"reference/SUMMARY/","text":"api client constants exceptions param_manager session url_builder converters date_handler detail_converter dynamic_pydantic_data_field dynamic_record_type_modeler prepare_records record_modeler type_handler database basedb database models DetailTypes RecStructure RecTypeGroups RecTypes Terms dty hml_structure rst rtg rty trm utils schema json_tools converter models sql sql_safety utils rel_to_dict_array","title":"SUMMARY"},{"location":"reference/api/client/","text":"client # Heurist API client Classes: HeuristAPIClient \u2013 Client for Heurist API. HeuristAPIClient # HeuristAPIClient ( database_name : str , login : str , password : str ) Client for Heurist API. Methods: get_records \u2013 Request all records of a certain type and in a certain data format. get_response_content \u2013 Request resources from the Heurist server. get_structure \u2013 Request the Heurist database's overall structure in XML format. get_records # get_records ( record_type_id : int , form : Literal [ \"xml\" , \"json\" ] = \"json\" , users : tuple [ int ] = (), ) -> bytes | list | None Request all records of a certain type and in a certain data format. Parameters: record_type_id ( int ) \u2013 Heurist ID of targeted record type. form ( Literal ['xml', 'json'] , default: 'json' ) \u2013 Data format for requested records. Defaults to \"json\". users ( tuple , default: () ) \u2013 Array of IDs of users who added the target records. Returns: bytes | list | None \u2013 bytes | list | None: If XML, binary response returned from Heurist server, else JSON array. get_response_content # get_response_content ( url : str ) -> ByteString | None Request resources from the Heurist server. Parameters: url ( str ) \u2013 Heurist API entry point. Returns: ByteString | None \u2013 ByteString | None: Binary response returned from Heurist server. get_structure # get_structure () -> bytes | None Request the Heurist database's overall structure in XML format. Returns: bytes | None \u2013 bytes | list | None: If XML, binary response returned from Heurist server, bytes | None \u2013 else JSON array.","title":"client"},{"location":"reference/api/client/#api.client","text":"Heurist API client Classes: HeuristAPIClient \u2013 Client for Heurist API.","title":"client"},{"location":"reference/api/client/#api.client.HeuristAPIClient","text":"HeuristAPIClient ( database_name : str , login : str , password : str ) Client for Heurist API. Methods: get_records \u2013 Request all records of a certain type and in a certain data format. get_response_content \u2013 Request resources from the Heurist server. get_structure \u2013 Request the Heurist database's overall structure in XML format.","title":"HeuristAPIClient"},{"location":"reference/api/client/#api.client.HeuristAPIClient.get_records","text":"get_records ( record_type_id : int , form : Literal [ \"xml\" , \"json\" ] = \"json\" , users : tuple [ int ] = (), ) -> bytes | list | None Request all records of a certain type and in a certain data format. Parameters: record_type_id ( int ) \u2013 Heurist ID of targeted record type. form ( Literal ['xml', 'json'] , default: 'json' ) \u2013 Data format for requested records. Defaults to \"json\". users ( tuple , default: () ) \u2013 Array of IDs of users who added the target records. Returns: bytes | list | None \u2013 bytes | list | None: If XML, binary response returned from Heurist server, else JSON array.","title":"get_records"},{"location":"reference/api/client/#api.client.HeuristAPIClient.get_response_content","text":"get_response_content ( url : str ) -> ByteString | None Request resources from the Heurist server. Parameters: url ( str ) \u2013 Heurist API entry point. Returns: ByteString | None \u2013 ByteString | None: Binary response returned from Heurist server.","title":"get_response_content"},{"location":"reference/api/client/#api.client.HeuristAPIClient.get_structure","text":"get_structure () -> bytes | None Request the Heurist database's overall structure in XML format. Returns: bytes | None \u2013 bytes | list | None: If XML, binary response returned from Heurist server, bytes | None \u2013 else JSON array.","title":"get_structure"},{"location":"reference/api/constants/","text":"constants # Constant text variables for Heurist API.","title":"constants"},{"location":"reference/api/constants/#api.constants","text":"Constant text variables for Heurist API.","title":"constants"},{"location":"reference/api/exceptions/","text":"exceptions # Classes: APIException \u2013 Problem calling Heurist API. AuthenticationError \u2013 Error raised when unable to authenticate Heurist login. MissingParameterException \u2013 Exception raised for a missing parameter. APIException # Bases: Exception Problem calling Heurist API. AuthenticationError # AuthenticationError ( message ) Bases: Exception Error raised when unable to authenticate Heurist login. MissingParameterException # MissingParameterException ( parameter ) Bases: Exception Exception raised for a missing parameter.","title":"exceptions"},{"location":"reference/api/exceptions/#api.exceptions","text":"Classes: APIException \u2013 Problem calling Heurist API. AuthenticationError \u2013 Error raised when unable to authenticate Heurist login. MissingParameterException \u2013 Exception raised for a missing parameter.","title":"exceptions"},{"location":"reference/api/exceptions/#api.exceptions.APIException","text":"Bases: Exception Problem calling Heurist API.","title":"APIException"},{"location":"reference/api/exceptions/#api.exceptions.AuthenticationError","text":"AuthenticationError ( message ) Bases: Exception Error raised when unable to authenticate Heurist login.","title":"AuthenticationError"},{"location":"reference/api/exceptions/#api.exceptions.MissingParameterException","text":"MissingParameterException ( parameter ) Bases: Exception Exception raised for a missing parameter.","title":"MissingParameterException"},{"location":"reference/api/param_manager/","text":"param_manager # Parameter manager for the Heurist API Client's authentication credentials. Classes: APIParamManager \u2013 Manager for the Heurist API Client's authentication credentials. APIParamManager # APIParamManager ( database_name : str | None = None , login : str | None = None , password : str | None = None , debugging : bool = False , get_env_vars : bool = True , ) Manager for the Heurist API Client's authentication credentials. Parse and/or recover the parameters needed for the Heurist API client. If values are not provided, try looking for them in the environment variables. Examples: >>> # Set environment variables >>> os . environ [ \"DB_NAME\" ] = \"db\" >>> os . environ [ \"DB_LOGIN\" ] = \"user\" >>> os . environ [ \"DB_PASSWORD\" ] = \"pass\" >>> >>> # Test using environment variables >>> params = APIParamManager () >>> params . database_name 'db' >>> params . login 'user' >>> params . password 'pass' >>> >>> # Test for mock database >>> params = APIParamManager ( debugging = True ) >>> params . database_name 'test_db' >>> params . login 'test_user' >>> params . password 'test_password' Parameters: database_name ( str | None , default: None ) \u2013 Name of the Heurist database. Defaults to None. login ( str | None , default: None ) \u2013 Heurist user's account name. Defaults to None. password ( str | None , default: None ) \u2013 Heurist user's password. Defaults to None. debugging ( bool , default: False ) \u2013 Whether or not to use fake credentials. Defaults to False. get_env_vars ( bool , default: True ) \u2013 Whether or not to try getting variables from environment. Defaults to True. Methods: check_params \u2013 Check that all the parameters are available, either provided with the class instance or in the environment variables. Attributes: kwargs ( dict ) \u2013 Return the Heurist API client's authentication parameters as a dictionary. kwargs property # kwargs : dict Return the Heurist API client's authentication parameters as a dictionary. Examples: >>> vs = { \"database_name\" : \"db\" , \"login\" : \"user\" , \"password\" : \"pass\" , \"debugging\" : True } >>> params = APIParamManager ( ** vs ) >>> params . kwargs {'database_name': 'test_db', 'login': 'test_user', 'password': 'test_password'} Returns: dict ( dict ) \u2013 Heurist API client parameters in key-value pairs. check_params # check_params ( get_env_vars : bool = True , ) -> None | MissingParameterException Check that all the parameters are available, either provided with the class instance or in the environment variables. Examples: >>> # Do not get parameters from environment variables >>> params = { \"get_env_vars\" : False } >>> # Raise exception because database name was not provided >>> APIParamManager ( ** params ) Traceback (most recent call last): ... heurist.api.exceptions.MissingParameterException : Missing parameter: DB_NAME >>> # Raise exception because login was not provided >>> params . update ({ \"database_name\" : \"test_db\" }) >>> APIParamManager ( ** params ) Traceback (most recent call last): ... heurist.api.exceptions.MissingParameterException : Missing parameter: DB_LOGIN >>> # Raise exception because password was not provided >>> params . update ({ \"database_name\" : \"test_db\" , \"login\" : \"test_user\" }) >>> APIParamManager ( ** params ) Traceback (most recent call last): ... heurist.api.exceptions.MissingParameterException : Missing parameter: DB_PASSWORD Raises: MissingParameterException \u2013 If a parameter is missing, raise an exception.","title":"param_manager"},{"location":"reference/api/param_manager/#api.param_manager","text":"Parameter manager for the Heurist API Client's authentication credentials. Classes: APIParamManager \u2013 Manager for the Heurist API Client's authentication credentials.","title":"param_manager"},{"location":"reference/api/param_manager/#api.param_manager.APIParamManager","text":"APIParamManager ( database_name : str | None = None , login : str | None = None , password : str | None = None , debugging : bool = False , get_env_vars : bool = True , ) Manager for the Heurist API Client's authentication credentials. Parse and/or recover the parameters needed for the Heurist API client. If values are not provided, try looking for them in the environment variables. Examples: >>> # Set environment variables >>> os . environ [ \"DB_NAME\" ] = \"db\" >>> os . environ [ \"DB_LOGIN\" ] = \"user\" >>> os . environ [ \"DB_PASSWORD\" ] = \"pass\" >>> >>> # Test using environment variables >>> params = APIParamManager () >>> params . database_name 'db' >>> params . login 'user' >>> params . password 'pass' >>> >>> # Test for mock database >>> params = APIParamManager ( debugging = True ) >>> params . database_name 'test_db' >>> params . login 'test_user' >>> params . password 'test_password' Parameters: database_name ( str | None , default: None ) \u2013 Name of the Heurist database. Defaults to None. login ( str | None , default: None ) \u2013 Heurist user's account name. Defaults to None. password ( str | None , default: None ) \u2013 Heurist user's password. Defaults to None. debugging ( bool , default: False ) \u2013 Whether or not to use fake credentials. Defaults to False. get_env_vars ( bool , default: True ) \u2013 Whether or not to try getting variables from environment. Defaults to True. Methods: check_params \u2013 Check that all the parameters are available, either provided with the class instance or in the environment variables. Attributes: kwargs ( dict ) \u2013 Return the Heurist API client's authentication parameters as a dictionary.","title":"APIParamManager"},{"location":"reference/api/param_manager/#api.param_manager.APIParamManager.kwargs","text":"kwargs : dict Return the Heurist API client's authentication parameters as a dictionary. Examples: >>> vs = { \"database_name\" : \"db\" , \"login\" : \"user\" , \"password\" : \"pass\" , \"debugging\" : True } >>> params = APIParamManager ( ** vs ) >>> params . kwargs {'database_name': 'test_db', 'login': 'test_user', 'password': 'test_password'} Returns: dict ( dict ) \u2013 Heurist API client parameters in key-value pairs.","title":"kwargs"},{"location":"reference/api/param_manager/#api.param_manager.APIParamManager.check_params","text":"check_params ( get_env_vars : bool = True , ) -> None | MissingParameterException Check that all the parameters are available, either provided with the class instance or in the environment variables. Examples: >>> # Do not get parameters from environment variables >>> params = { \"get_env_vars\" : False } >>> # Raise exception because database name was not provided >>> APIParamManager ( ** params ) Traceback (most recent call last): ... heurist.api.exceptions.MissingParameterException : Missing parameter: DB_NAME >>> # Raise exception because login was not provided >>> params . update ({ \"database_name\" : \"test_db\" }) >>> APIParamManager ( ** params ) Traceback (most recent call last): ... heurist.api.exceptions.MissingParameterException : Missing parameter: DB_LOGIN >>> # Raise exception because password was not provided >>> params . update ({ \"database_name\" : \"test_db\" , \"login\" : \"test_user\" }) >>> APIParamManager ( ** params ) Traceback (most recent call last): ... heurist.api.exceptions.MissingParameterException : Missing parameter: DB_PASSWORD Raises: MissingParameterException \u2013 If a parameter is missing, raise an exception.","title":"check_params"},{"location":"reference/api/session/","text":"session # Heurist API session Classes: HeuristRequestSession \u2013 HeuristRequestSession # HeuristRequestSession ( db : str , login : str , password : str ) Session context for a connection to the Heurist server. Parameters: db ( str ) \u2013 Heurist database name. login ( str ) \u2013 Username. password ( str ) \u2013 User's password. Raises: e \u2013 If the requests method fails, raise that exception. AuthenticationError \u2013 If the Heurist server returns a bad status code, raise an exception.","title":"session"},{"location":"reference/api/session/#api.session","text":"Heurist API session Classes: HeuristRequestSession \u2013","title":"session"},{"location":"reference/api/session/#api.session.HeuristRequestSession","text":"HeuristRequestSession ( db : str , login : str , password : str ) Session context for a connection to the Heurist server. Parameters: db ( str ) \u2013 Heurist database name. login ( str ) \u2013 Username. password ( str ) \u2013 User's password. Raises: e \u2013 If the requests method fails, raise that exception. AuthenticationError \u2013 If the Heurist server returns a bad status code, raise an exception.","title":"HeuristRequestSession"},{"location":"reference/api/url_builder/","text":"url_builder # Class to compose URIs for calling the Heurist API. Classes: URLBuilder \u2013 Class to construct endpoints for the Heurist API (on Huma-Num's server). URLBuilder # URLBuilder ( database_name : str , server : str = HUMA_NUM_SERVER ) Class to construct endpoints for the Heurist API (on Huma-Num's server). Methods: get_db_structure \u2013 URL to retrieve the database structure. get_records \u2013 Build a URL to retrieve records of a certain type. get_db_structure # get_db_structure () -> str URL to retrieve the database structure. Examples: >>> db = \"mock_db\" >>> builder = URLBuilder ( db ) >>> builder . get_db_structure () 'https://heurist.huma-num.fr/heurist/hserv/structure/export/getDBStructureAsXML.php?db=mock_db' Returns: str ( str ) \u2013 URL to retrieve the database structure. get_records # get_records ( record_type_id : int , form : Literal [ \"xml\" , \"json\" ] = \"xml\" , users : tuple = (), ) -> str Build a URL to retrieve records of a certain type. Examples: >>> db = \"mock_db\" >>> builder = URLBuilder ( db ) >>> builder . get_records ( 101 ) 'https://heurist.huma-num.fr/heurist/export/xml/flathml.php?q=[{\"t\"%3A\"101\"}%2C{\"sortby\"%3A\"t\"}]&a=1&db=mock_db&depth=all&linkmode=direct_links' >>> db = \"mock_db\" >>> builder = URLBuilder ( db ) >>> builder . get_records ( 102 , form = \"json\" ) 'https://heurist.huma-num.fr/heurist/hserv/controller/record_output.php?q=[{\"t\"%3A\"102\"}%2C{\"sortby\"%3A\"t\"}]&a=1&db=mock_db&depth=all&linkmode=direct_links&format=json&defs=0&extended=2' >>> db = \"mock_db\" >>> builder = URLBuilder ( db ) >>> builder . get_records ( 102 , users = ( 2 , 16 ,)) 'https://heurist.huma-num.fr/heurist/export/xml/flathml.php?q=[{\"t\"%3A\"102\"}%2C{\"sortby\"%3A\"t\"}%2C{\"addedby\"%3A\"2%2C16\"}]&a=1&db=mock_db&depth=all&linkmode=direct_links' Parameters: record_type_id ( int ) \u2013 Heurist ID of the record type. form ( Literal ['xml', 'json'] , default: 'xml' ) \u2013 The format of the exported data. Returns: str ( str ) \u2013 URL to retrieve records of a certain type.","title":"url_builder"},{"location":"reference/api/url_builder/#api.url_builder","text":"Class to compose URIs for calling the Heurist API. Classes: URLBuilder \u2013 Class to construct endpoints for the Heurist API (on Huma-Num's server).","title":"url_builder"},{"location":"reference/api/url_builder/#api.url_builder.URLBuilder","text":"URLBuilder ( database_name : str , server : str = HUMA_NUM_SERVER ) Class to construct endpoints for the Heurist API (on Huma-Num's server). Methods: get_db_structure \u2013 URL to retrieve the database structure. get_records \u2013 Build a URL to retrieve records of a certain type.","title":"URLBuilder"},{"location":"reference/api/url_builder/#api.url_builder.URLBuilder.get_db_structure","text":"get_db_structure () -> str URL to retrieve the database structure. Examples: >>> db = \"mock_db\" >>> builder = URLBuilder ( db ) >>> builder . get_db_structure () 'https://heurist.huma-num.fr/heurist/hserv/structure/export/getDBStructureAsXML.php?db=mock_db' Returns: str ( str ) \u2013 URL to retrieve the database structure.","title":"get_db_structure"},{"location":"reference/api/url_builder/#api.url_builder.URLBuilder.get_records","text":"get_records ( record_type_id : int , form : Literal [ \"xml\" , \"json\" ] = \"xml\" , users : tuple = (), ) -> str Build a URL to retrieve records of a certain type. Examples: >>> db = \"mock_db\" >>> builder = URLBuilder ( db ) >>> builder . get_records ( 101 ) 'https://heurist.huma-num.fr/heurist/export/xml/flathml.php?q=[{\"t\"%3A\"101\"}%2C{\"sortby\"%3A\"t\"}]&a=1&db=mock_db&depth=all&linkmode=direct_links' >>> db = \"mock_db\" >>> builder = URLBuilder ( db ) >>> builder . get_records ( 102 , form = \"json\" ) 'https://heurist.huma-num.fr/heurist/hserv/controller/record_output.php?q=[{\"t\"%3A\"102\"}%2C{\"sortby\"%3A\"t\"}]&a=1&db=mock_db&depth=all&linkmode=direct_links&format=json&defs=0&extended=2' >>> db = \"mock_db\" >>> builder = URLBuilder ( db ) >>> builder . get_records ( 102 , users = ( 2 , 16 ,)) 'https://heurist.huma-num.fr/heurist/export/xml/flathml.php?q=[{\"t\"%3A\"102\"}%2C{\"sortby\"%3A\"t\"}%2C{\"addedby\"%3A\"2%2C16\"}]&a=1&db=mock_db&depth=all&linkmode=direct_links' Parameters: record_type_id ( int ) \u2013 Heurist ID of the record type. form ( Literal ['xml', 'json'] , default: 'xml' ) \u2013 The format of the exported data. Returns: str ( str ) \u2013 URL to retrieve records of a certain type.","title":"get_records"},{"location":"reference/converters/date_handler/","text":"date_handler # Classes: HeuristDateHandler \u2013 HeuristDateHandler # Methods: fill_out_date_str \u2013 Convert Heurist's partial date representations to an ISO string format. list_min_max \u2013 Convert Heurist's representation of dates into a list of Python datetime objects, representing the earliest and latest dates in the given values. parse \u2013 Parse a single date's representation into a Python datetime object. fill_out_date_str classmethod # fill_out_date_str ( date_representation : str | int | float , ) -> str Convert Heurist's partial date representations to an ISO string format. Examples: >>> # Test a string representation of a date >>> v = \"2024-03-19\" >>> HeuristDateHandler . fill_out_date_str ( v ) '2024-03-19' >>> # Test an integer representation of a year, i.e. circa 1188 >>> v = 1188 >>> HeuristDateHandler . fill_out_date_str ( v ) '1188-01-01' >>> # Test a float representation of a date >>> v = 1250.1231 >>> HeuristDateHandler . fill_out_date_str ( v ) '1250-12-31' Parameters: date_representation ( str | int | float ) \u2013 Heurist representation of a date. Returns: str ( str ) \u2013 ISO string format of a date, YYYY-MM-DD. list_min_max classmethod # list_min_max ( date_representations : ( str | int | float | list [ str | str | float ] ), ) -> list [ datetime ] Convert Heurist's representation of dates into a list of Python datetime objects, representing the earliest and latest dates in the given values. Examples: >>> # Test a string representation of a date >>> v = \"2024-03-19\" >>> HeuristDateHandler . list_min_max ( v ) [datetime.datetime(2024, 3, 19, 0, 0), None] >>> # Test an integer representation of a year, i.e. circa 1188 >>> v = 1188 >>> HeuristDateHandler . list_min_max ( v ) [datetime.datetime(1188, 1, 1, 0, 0), None] >>> # Test a list of date representations >>> v = [ 1180 , 1250.1231 ] >>> HeuristDateHandler . list_min_max ( v ) [datetime.datetime(1180, 1, 1, 0, 0), datetime.datetime(1250, 12, 31, 0, 0)] Parameters: date_representations ( str | int | float | list [ str | int | float ] ) \u2013 Heurist's representation of dates. Returns: list [ datetime ] \u2013 list[datetime]: Ordered list of the earliest and latest dates. parse classmethod # parse ( date_representation : str | int | float ) -> datetime Parse a single date's representation into a Python datetime object. Parameters: date_representation ( str | int | float ) \u2013 Heurist date representation. Returns: datetime ( datetime ) \u2013 Datetime object representing a date in Heurist data.","title":"date_handler"},{"location":"reference/converters/date_handler/#converters.date_handler","text":"Classes: HeuristDateHandler \u2013","title":"date_handler"},{"location":"reference/converters/date_handler/#converters.date_handler.HeuristDateHandler","text":"Methods: fill_out_date_str \u2013 Convert Heurist's partial date representations to an ISO string format. list_min_max \u2013 Convert Heurist's representation of dates into a list of Python datetime objects, representing the earliest and latest dates in the given values. parse \u2013 Parse a single date's representation into a Python datetime object.","title":"HeuristDateHandler"},{"location":"reference/converters/date_handler/#converters.date_handler.HeuristDateHandler.fill_out_date_str","text":"fill_out_date_str ( date_representation : str | int | float , ) -> str Convert Heurist's partial date representations to an ISO string format. Examples: >>> # Test a string representation of a date >>> v = \"2024-03-19\" >>> HeuristDateHandler . fill_out_date_str ( v ) '2024-03-19' >>> # Test an integer representation of a year, i.e. circa 1188 >>> v = 1188 >>> HeuristDateHandler . fill_out_date_str ( v ) '1188-01-01' >>> # Test a float representation of a date >>> v = 1250.1231 >>> HeuristDateHandler . fill_out_date_str ( v ) '1250-12-31' Parameters: date_representation ( str | int | float ) \u2013 Heurist representation of a date. Returns: str ( str ) \u2013 ISO string format of a date, YYYY-MM-DD.","title":"fill_out_date_str"},{"location":"reference/converters/date_handler/#converters.date_handler.HeuristDateHandler.list_min_max","text":"list_min_max ( date_representations : ( str | int | float | list [ str | str | float ] ), ) -> list [ datetime ] Convert Heurist's representation of dates into a list of Python datetime objects, representing the earliest and latest dates in the given values. Examples: >>> # Test a string representation of a date >>> v = \"2024-03-19\" >>> HeuristDateHandler . list_min_max ( v ) [datetime.datetime(2024, 3, 19, 0, 0), None] >>> # Test an integer representation of a year, i.e. circa 1188 >>> v = 1188 >>> HeuristDateHandler . list_min_max ( v ) [datetime.datetime(1188, 1, 1, 0, 0), None] >>> # Test a list of date representations >>> v = [ 1180 , 1250.1231 ] >>> HeuristDateHandler . list_min_max ( v ) [datetime.datetime(1180, 1, 1, 0, 0), datetime.datetime(1250, 12, 31, 0, 0)] Parameters: date_representations ( str | int | float | list [ str | int | float ] ) \u2013 Heurist's representation of dates. Returns: list [ datetime ] \u2013 list[datetime]: Ordered list of the earliest and latest dates.","title":"list_min_max"},{"location":"reference/converters/date_handler/#converters.date_handler.HeuristDateHandler.parse","text":"parse ( date_representation : str | int | float ) -> datetime Parse a single date's representation into a Python datetime object. Parameters: date_representation ( str | int | float ) \u2013 Heurist date representation. Returns: datetime ( datetime ) \u2013 Datetime object representing a date in Heurist data.","title":"parse"},{"location":"reference/converters/detail_converter/","text":"detail_converter # Class for converting a record's detail before the Pydantic model validation. Classes: RecordDetailConverter \u2013 In Heurist, a record's \"detail\" is what is more commonly known as an attribute, dimension, or the value of a data field. RecordDetailConverter # RecordDetailConverter () In Heurist, a record's \"detail\" is what is more commonly known as an attribute, dimension, or the value of a data field. This class features methods to extract the key value from Heurist's JSON formatting for all data types in Heurist's system. Methods: date \u2013 Extract the the earliest and latest dates from a date field. enum \u2013 Extract the value of an enum field. file \u2013 Extract the value of a file field. geo \u2013 Extract the value of a geo field. resource \u2013 Extract the value of a resource (foreign key) field. date classmethod # date ( detail : dict ) -> list [ datetime | None ] Extract the the earliest and latest dates from a date field. Parameters: detail ( dict ) \u2013 Record's detail. Returns: list [ datetime | None] \u2013 list[datetime]: Earliest and latest dates from detail. enum classmethod # enum ( detail : dict ) -> str Extract the value of an enum field. Parameters: detail ( dict ) \u2013 Record's detail. Returns: str ( str ) \u2013 Value of record's detail. file classmethod # file ( detail : dict ) -> str Extract the value of a file field. Parameters: detail ( dict ) \u2013 Record's detail. Returns: str ( str ) \u2013 Value of record's detail. geo classmethod # geo ( detail : dict ) -> str Extract the value of a geo field. Parameters: detail ( dict ) \u2013 Record's detail. Returns: str ( str ) \u2013 Value of record's detail. resource classmethod # resource ( detail : dict ) -> int Extract the value of a resource (foreign key) field. Parameters: detail ( dict ) \u2013 Record's detail. Returns: int ( int ) \u2013 Heurist ID of the referenced record.","title":"detail_converter"},{"location":"reference/converters/detail_converter/#converters.detail_converter","text":"Class for converting a record's detail before the Pydantic model validation. Classes: RecordDetailConverter \u2013 In Heurist, a record's \"detail\" is what is more commonly known as an attribute, dimension, or the value of a data field.","title":"detail_converter"},{"location":"reference/converters/detail_converter/#converters.detail_converter.RecordDetailConverter","text":"RecordDetailConverter () In Heurist, a record's \"detail\" is what is more commonly known as an attribute, dimension, or the value of a data field. This class features methods to extract the key value from Heurist's JSON formatting for all data types in Heurist's system. Methods: date \u2013 Extract the the earliest and latest dates from a date field. enum \u2013 Extract the value of an enum field. file \u2013 Extract the value of a file field. geo \u2013 Extract the value of a geo field. resource \u2013 Extract the value of a resource (foreign key) field.","title":"RecordDetailConverter"},{"location":"reference/converters/detail_converter/#converters.detail_converter.RecordDetailConverter.date","text":"date ( detail : dict ) -> list [ datetime | None ] Extract the the earliest and latest dates from a date field. Parameters: detail ( dict ) \u2013 Record's detail. Returns: list [ datetime | None] \u2013 list[datetime]: Earliest and latest dates from detail.","title":"date"},{"location":"reference/converters/detail_converter/#converters.detail_converter.RecordDetailConverter.enum","text":"enum ( detail : dict ) -> str Extract the value of an enum field. Parameters: detail ( dict ) \u2013 Record's detail. Returns: str ( str ) \u2013 Value of record's detail.","title":"enum"},{"location":"reference/converters/detail_converter/#converters.detail_converter.RecordDetailConverter.file","text":"file ( detail : dict ) -> str Extract the value of a file field. Parameters: detail ( dict ) \u2013 Record's detail. Returns: str ( str ) \u2013 Value of record's detail.","title":"file"},{"location":"reference/converters/detail_converter/#converters.detail_converter.RecordDetailConverter.geo","text":"geo ( detail : dict ) -> str Extract the value of a geo field. Parameters: detail ( dict ) \u2013 Record's detail. Returns: str ( str ) \u2013 Value of record's detail.","title":"geo"},{"location":"reference/converters/detail_converter/#converters.detail_converter.RecordDetailConverter.resource","text":"resource ( detail : dict ) -> int Extract the value of a resource (foreign key) field. Parameters: detail ( dict ) \u2013 Record's detail. Returns: int ( int ) \u2013 Heurist ID of the referenced record.","title":"resource"},{"location":"reference/converters/dynamic_pydantic_data_field/","text":"dynamic_pydantic_data_field # Classes: DynamicDataFieldBuilder \u2013 DynamicDataFieldBuilder # DynamicDataFieldBuilder ( dty_ID : int , rst_DisplayName : str , dty_Type : str , rst_MaxValues : int , ) Using information of 1 detail (data field) from a Heurist record, build a Pydantic data field annotation. Parameters: dty_ID ( int ) \u2013 Detail's ID. rst_DisplayName ( str ) \u2013 Name of the detail displayed in Heurist. dty_Type ( str ) \u2013 Detail's data type. rst_MaxValues ( int ) \u2013 Heurist indicator if the detail can be repeated. Methods: is_type_repeatable \u2013 Heurist uses the code 0 to indicate that the a record's detail (field) can be repeated. Parse this information on the record structure to determine a boolean indicating whether or not the detail is repeated. simple_field \u2013 Build a Pydantic field annotation for a detail whose value will simply be the result of the RecordDetailConverter , meaning not a date and not a vocabulary term. temporal_object \u2013 Build a Pydantic field annotation for the raw JSON of Heurist's date object. This field is written to the Pydantic model in addition to a simpler column for the date field with the earliest and latest dates parsed as datetime objects. term_id \u2013 Build a Pydantic field annotation for a foreign key refernce to the vocabulary term in the constructed database's trm table. This field is written to the Pydantic model in addition to a column for the term that simply has the label. is_type_repeatable # is_type_repeatable () -> bool Heurist uses the code 0 to indicate that the a record's detail (field) can be repeated. Parse this information on the record structure to determine a boolean indicating whether or not the detail is repeated. Returns: bool ( bool ) \u2013 Whether the detail can be repeated. simple_field # simple_field () -> dict Build a Pydantic field annotation for a detail whose value will simply be the result of the RecordDetailConverter , meaning not a date and not a vocabulary term. Returns: dict ( dict ) \u2013 Pydantic field annotation. temporal_object # temporal_object () -> dict Build a Pydantic field annotation for the raw JSON of Heurist's date object. This field is written to the Pydantic model in addition to a simpler column for the date field with the earliest and latest dates parsed as datetime objects. Returns: dict ( dict ) \u2013 Pydantic field annotation. term_id # term_id () -> dict Build a Pydantic field annotation for a foreign key refernce to the vocabulary term in the constructed database's trm table. This field is written to the Pydantic model in addition to a column for the term that simply has the label. Returns: dict ( dict ) \u2013 Pydantic field annotation.","title":"dynamic_pydantic_data_field"},{"location":"reference/converters/dynamic_pydantic_data_field/#converters.dynamic_pydantic_data_field","text":"Classes: DynamicDataFieldBuilder \u2013","title":"dynamic_pydantic_data_field"},{"location":"reference/converters/dynamic_pydantic_data_field/#converters.dynamic_pydantic_data_field.DynamicDataFieldBuilder","text":"DynamicDataFieldBuilder ( dty_ID : int , rst_DisplayName : str , dty_Type : str , rst_MaxValues : int , ) Using information of 1 detail (data field) from a Heurist record, build a Pydantic data field annotation. Parameters: dty_ID ( int ) \u2013 Detail's ID. rst_DisplayName ( str ) \u2013 Name of the detail displayed in Heurist. dty_Type ( str ) \u2013 Detail's data type. rst_MaxValues ( int ) \u2013 Heurist indicator if the detail can be repeated. Methods: is_type_repeatable \u2013 Heurist uses the code 0 to indicate that the a record's detail (field) can be repeated. Parse this information on the record structure to determine a boolean indicating whether or not the detail is repeated. simple_field \u2013 Build a Pydantic field annotation for a detail whose value will simply be the result of the RecordDetailConverter , meaning not a date and not a vocabulary term. temporal_object \u2013 Build a Pydantic field annotation for the raw JSON of Heurist's date object. This field is written to the Pydantic model in addition to a simpler column for the date field with the earliest and latest dates parsed as datetime objects. term_id \u2013 Build a Pydantic field annotation for a foreign key refernce to the vocabulary term in the constructed database's trm table. This field is written to the Pydantic model in addition to a column for the term that simply has the label.","title":"DynamicDataFieldBuilder"},{"location":"reference/converters/dynamic_pydantic_data_field/#converters.dynamic_pydantic_data_field.DynamicDataFieldBuilder.is_type_repeatable","text":"is_type_repeatable () -> bool Heurist uses the code 0 to indicate that the a record's detail (field) can be repeated. Parse this information on the record structure to determine a boolean indicating whether or not the detail is repeated. Returns: bool ( bool ) \u2013 Whether the detail can be repeated.","title":"is_type_repeatable"},{"location":"reference/converters/dynamic_pydantic_data_field/#converters.dynamic_pydantic_data_field.DynamicDataFieldBuilder.simple_field","text":"simple_field () -> dict Build a Pydantic field annotation for a detail whose value will simply be the result of the RecordDetailConverter , meaning not a date and not a vocabulary term. Returns: dict ( dict ) \u2013 Pydantic field annotation.","title":"simple_field"},{"location":"reference/converters/dynamic_pydantic_data_field/#converters.dynamic_pydantic_data_field.DynamicDataFieldBuilder.temporal_object","text":"temporal_object () -> dict Build a Pydantic field annotation for the raw JSON of Heurist's date object. This field is written to the Pydantic model in addition to a simpler column for the date field with the earliest and latest dates parsed as datetime objects. Returns: dict ( dict ) \u2013 Pydantic field annotation.","title":"temporal_object"},{"location":"reference/converters/dynamic_pydantic_data_field/#converters.dynamic_pydantic_data_field.DynamicDataFieldBuilder.term_id","text":"term_id () -> dict Build a Pydantic field annotation for a foreign key refernce to the vocabulary term in the constructed database's trm table. This field is written to the Pydantic model in addition to a column for the term that simply has the label. Returns: dict ( dict ) \u2013 Pydantic field annotation.","title":"term_id"},{"location":"reference/converters/dynamic_record_type_modeler/","text":"dynamic_record_type_modeler # Classes: DynamicRecordTypeModel \u2013 DynamicRecordTypeModel # DynamicRecordTypeModel ( rty_ID : int , rty_Name : str , detail_metadata : list [ dict ] ) The records' detail metadata includes the following keys: dty_ID, rst_DisplayName, dty_Type, rst_MaxValues. Parameters: rty_ID ( int ) \u2013 The Heurist ID of the targeted record type. rty_Name ( str ) \u2013 The name of the targeted record type. detail_metadata ( list [ dict ] ) \u2013 A list of information about the targeted record's details. Methods: to_pydantic_model \u2013 Take a list of key-value pairs (dict), which pair a record's detail (data field) with a value, to_pydantic_model # to_pydantic_model ( detail_metadata : list [ dict ]) -> BaseModel Take a list of key-value pairs (dict), which pair a record's detail (data field) with a value, and convert that set of key-value pairs to a Pydantic model. Parameters: detail_metadata ( list [ dict ] ) \u2013 A record type's details, including the following keys: dty_ID, rst_DisplayName, dty_Type, rst_MaxValues Returns: BaseModel ( BaseModel ) \u2013 Dynamically created Pydantic BaseModel for the record type","title":"dynamic_record_type_modeler"},{"location":"reference/converters/dynamic_record_type_modeler/#converters.dynamic_record_type_modeler","text":"Classes: DynamicRecordTypeModel \u2013","title":"dynamic_record_type_modeler"},{"location":"reference/converters/dynamic_record_type_modeler/#converters.dynamic_record_type_modeler.DynamicRecordTypeModel","text":"DynamicRecordTypeModel ( rty_ID : int , rty_Name : str , detail_metadata : list [ dict ] ) The records' detail metadata includes the following keys: dty_ID, rst_DisplayName, dty_Type, rst_MaxValues. Parameters: rty_ID ( int ) \u2013 The Heurist ID of the targeted record type. rty_Name ( str ) \u2013 The name of the targeted record type. detail_metadata ( list [ dict ] ) \u2013 A list of information about the targeted record's details. Methods: to_pydantic_model \u2013 Take a list of key-value pairs (dict), which pair a record's detail (data field) with a value,","title":"DynamicRecordTypeModel"},{"location":"reference/converters/dynamic_record_type_modeler/#converters.dynamic_record_type_modeler.DynamicRecordTypeModel.to_pydantic_model","text":"to_pydantic_model ( detail_metadata : list [ dict ]) -> BaseModel Take a list of key-value pairs (dict), which pair a record's detail (data field) with a value, and convert that set of key-value pairs to a Pydantic model. Parameters: detail_metadata ( list [ dict ] ) \u2013 A record type's details, including the following keys: dty_ID, rst_DisplayName, dty_Type, rst_MaxValues Returns: BaseModel ( BaseModel ) \u2013 Dynamically created Pydantic BaseModel for the record type","title":"to_pydantic_model"},{"location":"reference/converters/prepare_records/","text":"prepare_records # Classes: RecordFlattener \u2013 Prepare array of record details for Pydantic model validation. RecordFlattener # RecordFlattener ( pydantic_model : BaseModel ) Prepare array of record details for Pydantic model validation.","title":"prepare_records"},{"location":"reference/converters/prepare_records/#converters.prepare_records","text":"Classes: RecordFlattener \u2013 Prepare array of record details for Pydantic model validation.","title":"prepare_records"},{"location":"reference/converters/prepare_records/#converters.prepare_records.RecordFlattener","text":"RecordFlattener ( pydantic_model : BaseModel ) Prepare array of record details for Pydantic model validation.","title":"RecordFlattener"},{"location":"reference/converters/record_modeler/","text":"record_modeler # Classes: RecordModeler \u2013 RecordModeler # RecordModeler ( pydantic_model : DynamicRecordTypeModel , record : dict ) Class for validating a Heurist record's data according to the dynamically created Pydantic model. Parameters: pydantic_model ( DynamicRecordTypeModel ) \u2013 Pydantic model. record ( dict ) \u2013 A Heurist record JSON object.","title":"record_modeler"},{"location":"reference/converters/record_modeler/#converters.record_modeler","text":"Classes: RecordModeler \u2013","title":"record_modeler"},{"location":"reference/converters/record_modeler/#converters.record_modeler.RecordModeler","text":"RecordModeler ( pydantic_model : DynamicRecordTypeModel , record : dict ) Class for validating a Heurist record's data according to the dynamically created Pydantic model. Parameters: pydantic_model ( DynamicRecordTypeModel ) \u2013 Pydantic model. record ( dict ) \u2013 A Heurist record JSON object.","title":"RecordModeler"},{"location":"reference/converters/type_handler/","text":"type_handler # Dataclass to organize and convert the data type of a Record's detail. Classes: HeuristDataType \u2013 Organize and convert the data types of a Record's detail. HeuristDataType dataclass # HeuristDataType () Organize and convert the data types of a Record's detail. Methods: from_json_record \u2013 Extract the field type from a record's detail. to_pydantic \u2013 Convert Heurist field type to Python type. to_sql \u2013 Convert a Heurist data type label (i.e. \"enum\") to an SQL equivalent. from_json_record classmethod # from_json_record ( detail : dict ) -> str Extract the field type from a record's detail. Parameters: detail ( dict ) \u2013 Record's detail. Returns: str ( str ) \u2013 Field type name. to_pydantic classmethod # to_pydantic ( datatype : str ) -> Any Convert Heurist field type to Python type. Parameters: datatype ( str ) \u2013 Field type name. Returns: Any ( Any ) \u2013 Python type. to_sql classmethod # to_sql ( datatype : str ) -> str Convert a Heurist data type label (i.e. \"enum\") to an SQL equivalent. Parameters: datatype ( str ) \u2013 Heurist data type. Returns: str ( str ) \u2013 SQL data type.","title":"type_handler"},{"location":"reference/converters/type_handler/#converters.type_handler","text":"Dataclass to organize and convert the data type of a Record's detail. Classes: HeuristDataType \u2013 Organize and convert the data types of a Record's detail.","title":"type_handler"},{"location":"reference/converters/type_handler/#converters.type_handler.HeuristDataType","text":"HeuristDataType () Organize and convert the data types of a Record's detail. Methods: from_json_record \u2013 Extract the field type from a record's detail. to_pydantic \u2013 Convert Heurist field type to Python type. to_sql \u2013 Convert a Heurist data type label (i.e. \"enum\") to an SQL equivalent.","title":"HeuristDataType"},{"location":"reference/converters/type_handler/#converters.type_handler.HeuristDataType.from_json_record","text":"from_json_record ( detail : dict ) -> str Extract the field type from a record's detail. Parameters: detail ( dict ) \u2013 Record's detail. Returns: str ( str ) \u2013 Field type name.","title":"from_json_record"},{"location":"reference/converters/type_handler/#converters.type_handler.HeuristDataType.to_pydantic","text":"to_pydantic ( datatype : str ) -> Any Convert Heurist field type to Python type. Parameters: datatype ( str ) \u2013 Field type name. Returns: Any ( Any ) \u2013 Python type.","title":"to_pydantic"},{"location":"reference/converters/type_handler/#converters.type_handler.HeuristDataType.to_sql","text":"to_sql ( datatype : str ) -> str Convert a Heurist data type label (i.e. \"enum\") to an SQL equivalent. Parameters: datatype ( str ) \u2013 Heurist data type. Returns: str ( str ) \u2013 SQL data type.","title":"to_sql"},{"location":"reference/database/basedb/","text":"basedb # Classes: HeuristDatabase \u2013 Base class for loading the original Heurist database structure. HeuristDatabase # HeuristDatabase ( hml_xml : bytes , conn : DuckDBPyConnection | None = None , db : str = \":memory:\" , ) Base class for loading the original Heurist database structure. Create a DuckDB database connection and populate the DuckDB database with the 5 base tables that comprise the Heurist database structure. Parameters: hml_xml ( bytes ) \u2013 Heurist database structure exported in XML format. conn ( DuckDBPyConnection | None , default: None ) \u2013 A DuckDB database connection. Defaults to None. db ( str , default: ':memory:' ) \u2013 Path to the DuckDB database. Defaults to \":memory:\". Methods: build_query_to_select_records_by_group \u2013 Generate an SQL query that selects the relevant metadata for the records of the targeted record type group or record type groups. create \u2013 Create an empty table in the DuckDB database connection delete_existing_table \u2013 If the table already exists in the DuckDB database, drop it. describe_record_schema \u2013 Join the tables 'dty' (detail), 'rst' (record structure), 'rty' (record type) trim_xml_bytes \u2013 Remove any extra whitespace from a potentially malformatted XML. build_query_to_select_records_by_group staticmethod # build_query_to_select_records_by_group ( record_type_groups : list [ str ], ) -> str Generate an SQL query that selects the relevant metadata for the records of the targeted record type group or record type groups. Examples: groups = ['My record types'] query = HeuristDatabase.build_query_to_select_records_by_group(groups) query.endswith(\"WHERE rtg.rtg_Name like 'My record types'\") True create # create ( name : str , model : BaseXmlModel ) -> None Create an empty table in the DuckDB database connection based on a Pydantic model. Examples: >>> # Set up the database class and parse a table model. >>> from heurist.mock_data import DB_STRUCTURE_XML >>> db = HeuristDatabase ( hml_xml = DB_STRUCTURE_XML ) >>> model = db . hml . RecTypeGroups . rtg >>> >>> # Create a table for the Record Type Group (rtg) table model. >>> db . create ( name = \"rtg\" , model = model ) >>> shape = db . conn . table ( \"rtg\" ) . fetchall () >>> # The Record Type Group (rtg) table should have 11 columns. >>> len ( shape ) 11 Parameters: model ( BaseXmlModel ) \u2013 A Pydantic XML model. delete_existing_table # delete_existing_table ( table_name : str ) -> None If the table already exists in the DuckDB database, drop it. Parameters: table_name ( str ) \u2013 Name of the table to potentially drop. describe_record_schema # describe_record_schema ( rty_ID : int ) -> DuckDBPyRelation Join the tables 'dty' (detail), 'rst' (record structure), 'rty' (record type) to get all the relevant information for a specific record type, plus add the label and description of the section / separator associated with each detail (if any). Parameters: rty_ID ( int ) \u2013 ID of the targeted record type. Returns: DuckDBPyRelation ( DuckDBPyRelation ) \u2013 A DuckDB Python relation that can be queried or converted. trim_xml_bytes classmethod # trim_xml_bytes ( xml : bytes ) -> bytes Remove any extra whitespace from a potentially malformatted XML. Parameters: xml ( bytes ) \u2013 Heurist database structure exported XML format. Returns: bytes ( bytes ) \u2013 Validated Heurist database structure in XML format.","title":"basedb"},{"location":"reference/database/basedb/#database.basedb","text":"Classes: HeuristDatabase \u2013 Base class for loading the original Heurist database structure.","title":"basedb"},{"location":"reference/database/basedb/#database.basedb.HeuristDatabase","text":"HeuristDatabase ( hml_xml : bytes , conn : DuckDBPyConnection | None = None , db : str = \":memory:\" , ) Base class for loading the original Heurist database structure. Create a DuckDB database connection and populate the DuckDB database with the 5 base tables that comprise the Heurist database structure. Parameters: hml_xml ( bytes ) \u2013 Heurist database structure exported in XML format. conn ( DuckDBPyConnection | None , default: None ) \u2013 A DuckDB database connection. Defaults to None. db ( str , default: ':memory:' ) \u2013 Path to the DuckDB database. Defaults to \":memory:\". Methods: build_query_to_select_records_by_group \u2013 Generate an SQL query that selects the relevant metadata for the records of the targeted record type group or record type groups. create \u2013 Create an empty table in the DuckDB database connection delete_existing_table \u2013 If the table already exists in the DuckDB database, drop it. describe_record_schema \u2013 Join the tables 'dty' (detail), 'rst' (record structure), 'rty' (record type) trim_xml_bytes \u2013 Remove any extra whitespace from a potentially malformatted XML.","title":"HeuristDatabase"},{"location":"reference/database/basedb/#database.basedb.HeuristDatabase.build_query_to_select_records_by_group","text":"build_query_to_select_records_by_group ( record_type_groups : list [ str ], ) -> str Generate an SQL query that selects the relevant metadata for the records of the targeted record type group or record type groups. Examples: groups = ['My record types'] query = HeuristDatabase.build_query_to_select_records_by_group(groups) query.endswith(\"WHERE rtg.rtg_Name like 'My record types'\") True","title":"build_query_to_select_records_by_group"},{"location":"reference/database/basedb/#database.basedb.HeuristDatabase.create","text":"create ( name : str , model : BaseXmlModel ) -> None Create an empty table in the DuckDB database connection based on a Pydantic model. Examples: >>> # Set up the database class and parse a table model. >>> from heurist.mock_data import DB_STRUCTURE_XML >>> db = HeuristDatabase ( hml_xml = DB_STRUCTURE_XML ) >>> model = db . hml . RecTypeGroups . rtg >>> >>> # Create a table for the Record Type Group (rtg) table model. >>> db . create ( name = \"rtg\" , model = model ) >>> shape = db . conn . table ( \"rtg\" ) . fetchall () >>> # The Record Type Group (rtg) table should have 11 columns. >>> len ( shape ) 11 Parameters: model ( BaseXmlModel ) \u2013 A Pydantic XML model.","title":"create"},{"location":"reference/database/basedb/#database.basedb.HeuristDatabase.delete_existing_table","text":"delete_existing_table ( table_name : str ) -> None If the table already exists in the DuckDB database, drop it. Parameters: table_name ( str ) \u2013 Name of the table to potentially drop.","title":"delete_existing_table"},{"location":"reference/database/basedb/#database.basedb.HeuristDatabase.describe_record_schema","text":"describe_record_schema ( rty_ID : int ) -> DuckDBPyRelation Join the tables 'dty' (detail), 'rst' (record structure), 'rty' (record type) to get all the relevant information for a specific record type, plus add the label and description of the section / separator associated with each detail (if any). Parameters: rty_ID ( int ) \u2013 ID of the targeted record type. Returns: DuckDBPyRelation ( DuckDBPyRelation ) \u2013 A DuckDB Python relation that can be queried or converted.","title":"describe_record_schema"},{"location":"reference/database/basedb/#database.basedb.HeuristDatabase.trim_xml_bytes","text":"trim_xml_bytes ( xml : bytes ) -> bytes Remove any extra whitespace from a potentially malformatted XML. Parameters: xml ( bytes ) \u2013 Heurist database structure exported XML format. Returns: bytes ( bytes ) \u2013 Validated Heurist database structure in XML format.","title":"trim_xml_bytes"},{"location":"reference/database/database/","text":"database # Classes: TransformedDatabase \u2013 Class for building and populating SQL tables with data collected and transformed from remote Heurist DB. TransformedDatabase # TransformedDatabase ( hml_xml : bytes , conn : DuckDBPyConnection | None = None , save_structure : bool = False , db : str | None = \":memory:\" , record_type_groups : list [ str ] = [ \"My record types\" ], ) Bases: HeuristDatabase Class for building and populating SQL tables with data collected and transformed from remote Heurist DB. Methods: model_record_data \u2013 Model the data of each record in a list of records. model_record_data # model_record_data ( pydantic_model : DynamicRecordTypeModel , records : list [ dict ], ) -> list [ BaseModel ] Model the data of each record in a list of records. Parameters: pydantic_model ( DynamicRecordTypeModel ) \u2013 Pydantic model created for the record. records ( list [ dict ] ) \u2013 A JSON array of a record's details. Yields: list [ BaseModel ] \u2013 Iterator[BaseModel]: Array of Pydantic models validated with records' data.","title":"database"},{"location":"reference/database/database/#database.database","text":"Classes: TransformedDatabase \u2013 Class for building and populating SQL tables with data collected and transformed from remote Heurist DB.","title":"database"},{"location":"reference/database/database/#database.database.TransformedDatabase","text":"TransformedDatabase ( hml_xml : bytes , conn : DuckDBPyConnection | None = None , save_structure : bool = False , db : str | None = \":memory:\" , record_type_groups : list [ str ] = [ \"My record types\" ], ) Bases: HeuristDatabase Class for building and populating SQL tables with data collected and transformed from remote Heurist DB. Methods: model_record_data \u2013 Model the data of each record in a list of records.","title":"TransformedDatabase"},{"location":"reference/database/database/#database.database.TransformedDatabase.model_record_data","text":"model_record_data ( pydantic_model : DynamicRecordTypeModel , records : list [ dict ], ) -> list [ BaseModel ] Model the data of each record in a list of records. Parameters: pydantic_model ( DynamicRecordTypeModel ) \u2013 Pydantic model created for the record. records ( list [ dict ] ) \u2013 A JSON array of a record's details. Yields: list [ BaseModel ] \u2013 Iterator[BaseModel]: Array of Pydantic models validated with records' data.","title":"model_record_data"},{"location":"reference/models/DetailTypes/","text":"DetailTypes # Classes: DetailTypes \u2013 Dataclass for modeling all of the database structure's Detail Types. DetailTypes # Bases: BaseXmlModel Dataclass for modeling all of the database structure's Detail Types. Attributes: dty ( list ) \u2013 list of instantiated dataclasses that model all of the database's Detail Types. Examples: >>> from heurist.mock_data import DB_STRUCTURE_XML >>> from heurist.models import HMLStructure >>> >>> >>> # Parse structure >>> xml = DB_STRUCTURE_XML >>> hml = HMLStructure . from_xml ( xml ) >>> >>> # Test class >>> first_detail_type = hml . DetailTypes . dty [ 0 ] >>> first_detail_type . dty_ID 1 >>> singular_pointer = [ d for d in hml . DetailTypes . dty if d . dty_ID == 1295 ][ 0 ] >>> singular_pointer . dty_PtrTargetRectypeIDs [101] >>> plural_pointer = [ d for d in hml . DetailTypes . dty if d . dty_ID == 1256 ][ 0 ] >>> plural_pointer . dty_PtrTargetRectypeIDs [101, 105, 106]","title":"DetailTypes"},{"location":"reference/models/DetailTypes/#models.DetailTypes","text":"Classes: DetailTypes \u2013 Dataclass for modeling all of the database structure's Detail Types.","title":"DetailTypes"},{"location":"reference/models/DetailTypes/#models.DetailTypes.DetailTypes","text":"Bases: BaseXmlModel Dataclass for modeling all of the database structure's Detail Types. Attributes: dty ( list ) \u2013 list of instantiated dataclasses that model all of the database's Detail Types. Examples: >>> from heurist.mock_data import DB_STRUCTURE_XML >>> from heurist.models import HMLStructure >>> >>> >>> # Parse structure >>> xml = DB_STRUCTURE_XML >>> hml = HMLStructure . from_xml ( xml ) >>> >>> # Test class >>> first_detail_type = hml . DetailTypes . dty [ 0 ] >>> first_detail_type . dty_ID 1 >>> singular_pointer = [ d for d in hml . DetailTypes . dty if d . dty_ID == 1295 ][ 0 ] >>> singular_pointer . dty_PtrTargetRectypeIDs [101] >>> plural_pointer = [ d for d in hml . DetailTypes . dty if d . dty_ID == 1256 ][ 0 ] >>> plural_pointer . dty_PtrTargetRectypeIDs [101, 105, 106]","title":"DetailTypes"},{"location":"reference/models/RecStructure/","text":"RecStructure # Classes: RecStructure \u2013 Dataclass for modeling all of the database structure's Record Structures. RecStructure # Bases: BaseXmlModel Dataclass for modeling all of the database structure's Record Structures. Attributes: rst ( list ) \u2013 list of instantiated dataclasses that model all of the database's Record Structures. Examples: >>> from heurist.mock_data import DB_STRUCTURE_XML >>> from heurist.models import HMLStructure >>> >>> >>> # Parse structure >>> xml = DB_STRUCTURE_XML >>> hml = HMLStructure . from_xml ( xml ) >>> >>> # Test class >>> first_record_structure = hml . RecStructure . rst [ 0 ] >>> first_record_structure . rst_ID 1","title":"RecStructure"},{"location":"reference/models/RecStructure/#models.RecStructure","text":"Classes: RecStructure \u2013 Dataclass for modeling all of the database structure's Record Structures.","title":"RecStructure"},{"location":"reference/models/RecStructure/#models.RecStructure.RecStructure","text":"Bases: BaseXmlModel Dataclass for modeling all of the database structure's Record Structures. Attributes: rst ( list ) \u2013 list of instantiated dataclasses that model all of the database's Record Structures. Examples: >>> from heurist.mock_data import DB_STRUCTURE_XML >>> from heurist.models import HMLStructure >>> >>> >>> # Parse structure >>> xml = DB_STRUCTURE_XML >>> hml = HMLStructure . from_xml ( xml ) >>> >>> # Test class >>> first_record_structure = hml . RecStructure . rst [ 0 ] >>> first_record_structure . rst_ID 1","title":"RecStructure"},{"location":"reference/models/RecTypeGroups/","text":"RecTypeGroups # Classes: RecTypeGroups \u2013 Dataclass for modeling all of the database structure's Record Type Groups. RecTypeGroups # Bases: BaseXmlModel Dataclass for modeling all of the database structure's Record Type Groups. Attributes: rtg ( list ) \u2013 list of instantiated dataclasses that model all of the database's Record Type Groups. Examples: >>> from heurist.mock_data import DB_STRUCTURE_XML >>> from heurist.models import HMLStructure >>> >>> >>> # Parse structure >>> xml = DB_STRUCTURE_XML >>> hml = HMLStructure . from_xml ( xml ) >>> >>> # Test class >>> first_record_type = hml . RecTypeGroups . rtg [ 0 ] >>> first_record_type . rtg_ID 4","title":"RecTypeGroups"},{"location":"reference/models/RecTypeGroups/#models.RecTypeGroups","text":"Classes: RecTypeGroups \u2013 Dataclass for modeling all of the database structure's Record Type Groups.","title":"RecTypeGroups"},{"location":"reference/models/RecTypeGroups/#models.RecTypeGroups.RecTypeGroups","text":"Bases: BaseXmlModel Dataclass for modeling all of the database structure's Record Type Groups. Attributes: rtg ( list ) \u2013 list of instantiated dataclasses that model all of the database's Record Type Groups. Examples: >>> from heurist.mock_data import DB_STRUCTURE_XML >>> from heurist.models import HMLStructure >>> >>> >>> # Parse structure >>> xml = DB_STRUCTURE_XML >>> hml = HMLStructure . from_xml ( xml ) >>> >>> # Test class >>> first_record_type = hml . RecTypeGroups . rtg [ 0 ] >>> first_record_type . rtg_ID 4","title":"RecTypeGroups"},{"location":"reference/models/RecTypes/","text":"RecTypes # Classes: RecTypes \u2013 Dataclass for modeling all of the database structure's Record Types. RecTypes # Bases: BaseXmlModel Dataclass for modeling all of the database structure's Record Types. Attributes: rty ( list ) \u2013 list of instantiated dataclasses that model all of the database's Record Types. Examples: >>> from heurist.mock_data import DB_STRUCTURE_XML >>> from heurist.models import HMLStructure >>> >>> >>> # Parse structure >>> xml = DB_STRUCTURE_XML >>> hml = HMLStructure . from_xml ( xml ) >>> >>> # Test class >>> first_record_type = hml . RecTypes . rty [ 0 ] >>> first_record_type . rty_ID 1","title":"RecTypes"},{"location":"reference/models/RecTypes/#models.RecTypes","text":"Classes: RecTypes \u2013 Dataclass for modeling all of the database structure's Record Types.","title":"RecTypes"},{"location":"reference/models/RecTypes/#models.RecTypes.RecTypes","text":"Bases: BaseXmlModel Dataclass for modeling all of the database structure's Record Types. Attributes: rty ( list ) \u2013 list of instantiated dataclasses that model all of the database's Record Types. Examples: >>> from heurist.mock_data import DB_STRUCTURE_XML >>> from heurist.models import HMLStructure >>> >>> >>> # Parse structure >>> xml = DB_STRUCTURE_XML >>> hml = HMLStructure . from_xml ( xml ) >>> >>> # Test class >>> first_record_type = hml . RecTypes . rty [ 0 ] >>> first_record_type . rty_ID 1","title":"RecTypes"},{"location":"reference/models/Terms/","text":"Terms # Classes: Terms \u2013 Dataclass for modeling all of the database structure's Terms. Terms # Bases: BaseXmlModel Dataclass for modeling all of the database structure's Terms. Attributes: trm ( list ) \u2013 list of instantiated dataclasses that model all of the database's Terms. Examples: >>> from heurist.mock_data import DB_STRUCTURE_XML >>> from heurist.models import HMLStructure >>> >>> >>> # Parse structure >>> xml = DB_STRUCTURE_XML >>> hml = HMLStructure . from_xml ( xml ) >>> >>> # Test class >>> first_detail_type = hml . Terms . trm [ 0 ] >>> first_detail_type . trm_ID 12 Parameters: BaseXmlModel ( _type_ ) \u2013 description","title":"Terms"},{"location":"reference/models/Terms/#models.Terms","text":"Classes: Terms \u2013 Dataclass for modeling all of the database structure's Terms.","title":"Terms"},{"location":"reference/models/Terms/#models.Terms.Terms","text":"Bases: BaseXmlModel Dataclass for modeling all of the database structure's Terms. Attributes: trm ( list ) \u2013 list of instantiated dataclasses that model all of the database's Terms. Examples: >>> from heurist.mock_data import DB_STRUCTURE_XML >>> from heurist.models import HMLStructure >>> >>> >>> # Parse structure >>> xml = DB_STRUCTURE_XML >>> hml = HMLStructure . from_xml ( xml ) >>> >>> # Test class >>> first_detail_type = hml . Terms . trm [ 0 ] >>> first_detail_type . trm_ID 12 Parameters: BaseXmlModel ( _type_ ) \u2013 description","title":"Terms"},{"location":"reference/models/dty/","text":"dty # Classes: DTY \u2013 Dataclass to model one of the database's Detail Types. A Detail Type is the DTY # Bases: BaseXmlModel Dataclass to model one of the database's Detail Types. A Detail Type is the generic schema that defines the type of data one of a record's field. When possible, the attribute descriptions are taken from Heurist's source code. Attributes: dty_ID ( int ) \u2013 Code for the detail type (field) - may vary between Heurist DBs. dty_Name ( str ) \u2013 The canonical (standard) name of the detail type, used as default in edit form. dty_Documentation ( Optional [ str ] ) \u2013 Documentation of the detail type, what it means, how defined. dty_Type ( Literal ['freetext', 'blocktext', 'integer', 'date', 'year', 'relmarker', 'boolean', 'enum', 'relationtype', 'resource', 'float', 'file', 'geo', 'separator', 'calculated', 'fieldsetmarker', 'urlinclude'] ) \u2013 The value-type of this detail type, what sort of data is stored. dty_HelpText ( Optional [ str ] ) \u2013 The default help text displayed to the user under the field. dty_ExtendedDescription ( Optional [ str ] ) \u2013 Extended text describing this detail type, for display in rollover. dty_EntryMask ( Optional [ str ] ) \u2013 Data entry mask, use to control decimals on numeric values, content of text fields etc. dty_Status ( Literal ['reserved', 'approved', 'pending', 'open'] ) \u2013 'Reserved' for the system, cannot be changed; 'Approved' for community standards; 'Pending' for work in progress; 'Open' for freely modifiable/personal record types. dty_OriginatingDBID ( int ) \u2013 Database where this detail type originated, 0 = locally. dty_NameInOriginatingDB ( Optional [ str ] ) \u2013 Name used in database where this detail type originated. dty_IDInOriginatingDB ( int ) \u2013 ID used in database where this detail type originated. dty_DetailTypeGroupID ( int ) \u2013 The general role of this detail allowing differentiated lists of detail types. dty_OrderInGroup ( int ) \u2013 The display order of DetailType within group, alphabetic if equal values. dty_JsonTermIDTree ( Optional [ str ] ) \u2013 Tree of Term IDs to show for this field (display-only header terms set in HeaderTermIDs). dty_TermIDTreeNonSelectableIDs ( List [ Optional [ int ]] ) \u2013 Term IDs to use as non-selectable headers for this field. dty_PtrTargetRectypeIDs ( List [ Optional [ int ]] ) \u2013 CSVlist of target Rectype IDs, null = any. dty_FieldSetRectypeID ( Optional [ int ] ) \u2013 For a FieldSetMarker, the record type to be inserted as a fieldset. dty_ShowInLists ( bool ) \u2013 Show this field type in pulldown lists etc. (always visible in field management screen). dty_NonOwnerVisibility ( Literal ['hidden', 'viewable', 'public'] ) \u2013 Hidden = visible only to owners, Viewable = any logged in user, Public = visible to non-logged in viewers. dty_Modified ( datetime ) \u2013 Date of last modification of this record, used to get last updated date for table. dty_LocallyModified ( bool ) \u2013 Flags a definition element which has been modified relative to the original source. dty_SemanticReferenceURL ( Optional [ str ] ) \u2013 URI to a full description or ontological reference definition of the base field (optional).","title":"dty"},{"location":"reference/models/dty/#models.dty","text":"Classes: DTY \u2013 Dataclass to model one of the database's Detail Types. A Detail Type is the","title":"dty"},{"location":"reference/models/dty/#models.dty.DTY","text":"Bases: BaseXmlModel Dataclass to model one of the database's Detail Types. A Detail Type is the generic schema that defines the type of data one of a record's field. When possible, the attribute descriptions are taken from Heurist's source code. Attributes: dty_ID ( int ) \u2013 Code for the detail type (field) - may vary between Heurist DBs. dty_Name ( str ) \u2013 The canonical (standard) name of the detail type, used as default in edit form. dty_Documentation ( Optional [ str ] ) \u2013 Documentation of the detail type, what it means, how defined. dty_Type ( Literal ['freetext', 'blocktext', 'integer', 'date', 'year', 'relmarker', 'boolean', 'enum', 'relationtype', 'resource', 'float', 'file', 'geo', 'separator', 'calculated', 'fieldsetmarker', 'urlinclude'] ) \u2013 The value-type of this detail type, what sort of data is stored. dty_HelpText ( Optional [ str ] ) \u2013 The default help text displayed to the user under the field. dty_ExtendedDescription ( Optional [ str ] ) \u2013 Extended text describing this detail type, for display in rollover. dty_EntryMask ( Optional [ str ] ) \u2013 Data entry mask, use to control decimals on numeric values, content of text fields etc. dty_Status ( Literal ['reserved', 'approved', 'pending', 'open'] ) \u2013 'Reserved' for the system, cannot be changed; 'Approved' for community standards; 'Pending' for work in progress; 'Open' for freely modifiable/personal record types. dty_OriginatingDBID ( int ) \u2013 Database where this detail type originated, 0 = locally. dty_NameInOriginatingDB ( Optional [ str ] ) \u2013 Name used in database where this detail type originated. dty_IDInOriginatingDB ( int ) \u2013 ID used in database where this detail type originated. dty_DetailTypeGroupID ( int ) \u2013 The general role of this detail allowing differentiated lists of detail types. dty_OrderInGroup ( int ) \u2013 The display order of DetailType within group, alphabetic if equal values. dty_JsonTermIDTree ( Optional [ str ] ) \u2013 Tree of Term IDs to show for this field (display-only header terms set in HeaderTermIDs). dty_TermIDTreeNonSelectableIDs ( List [ Optional [ int ]] ) \u2013 Term IDs to use as non-selectable headers for this field. dty_PtrTargetRectypeIDs ( List [ Optional [ int ]] ) \u2013 CSVlist of target Rectype IDs, null = any. dty_FieldSetRectypeID ( Optional [ int ] ) \u2013 For a FieldSetMarker, the record type to be inserted as a fieldset. dty_ShowInLists ( bool ) \u2013 Show this field type in pulldown lists etc. (always visible in field management screen). dty_NonOwnerVisibility ( Literal ['hidden', 'viewable', 'public'] ) \u2013 Hidden = visible only to owners, Viewable = any logged in user, Public = visible to non-logged in viewers. dty_Modified ( datetime ) \u2013 Date of last modification of this record, used to get last updated date for table. dty_LocallyModified ( bool ) \u2013 Flags a definition element which has been modified relative to the original source. dty_SemanticReferenceURL ( Optional [ str ] ) \u2013 URI to a full description or ontological reference definition of the base field (optional).","title":"DTY"},{"location":"reference/models/hml_structure/","text":"hml_structure # Classes: HMLStructure \u2013 Parent dataclass forr modeling the entire Heurist database structure. HMLStructure # Bases: BaseXmlModel Parent dataclass forr modeling the entire Heurist database structure. Attributes: detail_types ( DetailTypes ) \u2013 model for data nested in the DetailTypes tag. record_structures ( RecStructure ) \u2013 model for data nested in the RecStructure tag. record_types ( RecTypes ) \u2013 model for data nested in the RecTypes tag. Examples: >>> from heurist.mock_data import DB_STRUCTURE_XML >>> >>> >>> # Parse structure >>> xml = DB_STRUCTURE_XML >>> hml = HMLStructure . from_xml ( xml )","title":"hml_structure"},{"location":"reference/models/hml_structure/#models.hml_structure","text":"Classes: HMLStructure \u2013 Parent dataclass forr modeling the entire Heurist database structure.","title":"hml_structure"},{"location":"reference/models/hml_structure/#models.hml_structure.HMLStructure","text":"Bases: BaseXmlModel Parent dataclass forr modeling the entire Heurist database structure. Attributes: detail_types ( DetailTypes ) \u2013 model for data nested in the DetailTypes tag. record_structures ( RecStructure ) \u2013 model for data nested in the RecStructure tag. record_types ( RecTypes ) \u2013 model for data nested in the RecTypes tag. Examples: >>> from heurist.mock_data import DB_STRUCTURE_XML >>> >>> >>> # Parse structure >>> xml = DB_STRUCTURE_XML >>> hml = HMLStructure . from_xml ( xml )","title":"HMLStructure"},{"location":"reference/models/rst/","text":"rst # Classes: RST \u2013 Dataclass to model one of the database's Record Structures. Record Structures RST # Bases: BaseXmlModel Dataclass to model one of the database's Record Structures. Record Structures are the fields of a Record Type. When possible, the attribute descriptions are taken from Heurist's source code. Attributes: rst_ID ( int ) \u2013 Primary key for the record structures table rst_RecTypeID ( int ) \u2013 The record type to which this detail is allocated, 0 = all rectypes rst_DetailTypeID ( int ) \u2013 Detail type for this field or, if MSB set, FieldSet code + 32767 rst_DisplayName ( str ) \u2013 Display name for this dtl type in this rectype, autofill with dty_Name rst_DisplayHelpText ( Optional [ str ] ) \u2013 The user help text to be displayed for this detail type for this record type rst_DisplayExtendedDescription ( Optional [ str ] ) \u2013 The rollover text to be displayed for this detail type for this record type rst_DisplayOrder ( int ) \u2013 A sort order for display of this detail type in the record edit form rst_DisplayWidth ( int ) \u2013 The field width displayed for this detail type in this record type rst_DisplayHeight ( int ) \u2013 The field height for this detail type in this record type, only relevant for memo fields rst_DefaultValue ( Optional [ str ] ) \u2013 The default value for this detail type for this record type rst_RecordMatchOrder ( int ) \u2013 Indicates order of significance in detecting duplicate records, 1 = highest rst_CalcFunctionID ( Optional [ int ] ) \u2013 FK to table of function specifications for calculating string values rst_CalcFieldMask ( Optional [ str ] ) \u2013 A mask string along the lines of the title mask allowing a composite field to be generated from other fields in the record rst_RequirementType ( Literal ['required', 'recommended', 'optional', 'forbidden'] ) \u2013 rst_NonOwnerVisibility ( Literal ['hidden', 'viewable', 'public', 'pending'] ) \u2013 Allows restriction of visibility of a particular field in a specified record type rst_Status ( Literal ['reserved', 'approved', 'pending', 'open'] ) \u2013 Reserved Heurist codes, approved/pending by ''Board'', and user additions rst_MayModify ( Literal ['locked', 'discouraged', 'open'] ) \u2013 Extent to which detail may be modified within this record structure rst_OriginatingDBID ( int ) \u2013 Database where this record structure element originated, 0 = locally rst_IDInOriginatingDB ( Optional [ int ] ) \u2013 ID used in database where this record structure element originated rst_MaxValues ( int ) \u2013 Maximum number of values per record for this detail, 1 - single, >1 limited, NULL or 0 = no limit rst_MinValues ( int ) \u2013 If required, minimum number of values per record for this detail rst_InitialRepeats ( int ) \u2013 Number of repeat values to be displayed for this field when a new record is first displayed rst_DisplayDetailTypeGroupID ( Optional [ int ] ) \u2013 If set, places detail in specified group instead of according to dty_DetailTypeGroup rst_FilteredJsonTermIDTree ( Optional [ str ] ) \u2013 JSON encoded tree of allowed terms, subset of those defined in defDetailType. This field is no longer used rst_PtrFilteredIDs ( Optional [ str ] ) \u2013 Allowed Rectypes (CSV) within list defined by defDetailType (for pointer details) This field is no longer used rst_CreateChildIfRecPtr ( bool ) \u2013 For pointer fields, flags that new records created from this field should be marked as children of the creating record rst_PointerMode ( Literal ['dropdown_add', 'dropdown', 'addorbrowse', 'addonly', 'browseonly'] ) \u2013 When adding record pointer values, default or null = show both add and browse, otherwise only allow add or only allow browse-for-existing rst_PointerBrowseFilter ( Optional [ str ] ) \u2013 When adding record pointer values, defines a Heurist filter to restrict the list of target records browsed rst_OrderForThumbnailGeneration ( Optional [ str ] ) \u2013 Priority order of fields to use in generating thumbnail, null = do not use rst_TermIDTreeNonSelectableIDs ( Optional [ str ] ) \u2013 Term IDs to use as non-selectable headers for this field rst_ShowDetailCertainty ( bool ) \u2013 When editing the field, allow editng of the dtl_Certainty value (off by default) rst_ShowDetailAnnotation ( bool ) \u2013 When editing the field, allow editng of the dtl_Annotation value (off by default) rst_NumericLargestValueUsed ( Optional [ int ] ) \u2013 For numeric fields, Null = no auto increment, 0 or more indicates largest value used so far. Set to 0 to switch on incrementing rst_EntryMask ( Optional [ str ] ) \u2013 Data entry mask, use to control decimals on numeric values, content of text fields etc. for this record type - future implementation Aug 2017 rst_Modified ( datetime ) \u2013 Date of last modification of this record, used to get last updated date for table rst_LocallyModified ( int ) \u2013 Flags a definition element which has been modified relative to the original source rst_SemanticReferenceURL ( Optional [ str ] ) \u2013 The URI to a semantic definition or web page describing this field used within this record type rst_TermsAsButtons ( bool ) \u2013 If 1, term list fields are represented as buttons (if single value) or checkboxes (if repeat values)","title":"rst"},{"location":"reference/models/rst/#models.rst","text":"Classes: RST \u2013 Dataclass to model one of the database's Record Structures. Record Structures","title":"rst"},{"location":"reference/models/rst/#models.rst.RST","text":"Bases: BaseXmlModel Dataclass to model one of the database's Record Structures. Record Structures are the fields of a Record Type. When possible, the attribute descriptions are taken from Heurist's source code. Attributes: rst_ID ( int ) \u2013 Primary key for the record structures table rst_RecTypeID ( int ) \u2013 The record type to which this detail is allocated, 0 = all rectypes rst_DetailTypeID ( int ) \u2013 Detail type for this field or, if MSB set, FieldSet code + 32767 rst_DisplayName ( str ) \u2013 Display name for this dtl type in this rectype, autofill with dty_Name rst_DisplayHelpText ( Optional [ str ] ) \u2013 The user help text to be displayed for this detail type for this record type rst_DisplayExtendedDescription ( Optional [ str ] ) \u2013 The rollover text to be displayed for this detail type for this record type rst_DisplayOrder ( int ) \u2013 A sort order for display of this detail type in the record edit form rst_DisplayWidth ( int ) \u2013 The field width displayed for this detail type in this record type rst_DisplayHeight ( int ) \u2013 The field height for this detail type in this record type, only relevant for memo fields rst_DefaultValue ( Optional [ str ] ) \u2013 The default value for this detail type for this record type rst_RecordMatchOrder ( int ) \u2013 Indicates order of significance in detecting duplicate records, 1 = highest rst_CalcFunctionID ( Optional [ int ] ) \u2013 FK to table of function specifications for calculating string values rst_CalcFieldMask ( Optional [ str ] ) \u2013 A mask string along the lines of the title mask allowing a composite field to be generated from other fields in the record rst_RequirementType ( Literal ['required', 'recommended', 'optional', 'forbidden'] ) \u2013 rst_NonOwnerVisibility ( Literal ['hidden', 'viewable', 'public', 'pending'] ) \u2013 Allows restriction of visibility of a particular field in a specified record type rst_Status ( Literal ['reserved', 'approved', 'pending', 'open'] ) \u2013 Reserved Heurist codes, approved/pending by ''Board'', and user additions rst_MayModify ( Literal ['locked', 'discouraged', 'open'] ) \u2013 Extent to which detail may be modified within this record structure rst_OriginatingDBID ( int ) \u2013 Database where this record structure element originated, 0 = locally rst_IDInOriginatingDB ( Optional [ int ] ) \u2013 ID used in database where this record structure element originated rst_MaxValues ( int ) \u2013 Maximum number of values per record for this detail, 1 - single, >1 limited, NULL or 0 = no limit rst_MinValues ( int ) \u2013 If required, minimum number of values per record for this detail rst_InitialRepeats ( int ) \u2013 Number of repeat values to be displayed for this field when a new record is first displayed rst_DisplayDetailTypeGroupID ( Optional [ int ] ) \u2013 If set, places detail in specified group instead of according to dty_DetailTypeGroup rst_FilteredJsonTermIDTree ( Optional [ str ] ) \u2013 JSON encoded tree of allowed terms, subset of those defined in defDetailType. This field is no longer used rst_PtrFilteredIDs ( Optional [ str ] ) \u2013 Allowed Rectypes (CSV) within list defined by defDetailType (for pointer details) This field is no longer used rst_CreateChildIfRecPtr ( bool ) \u2013 For pointer fields, flags that new records created from this field should be marked as children of the creating record rst_PointerMode ( Literal ['dropdown_add', 'dropdown', 'addorbrowse', 'addonly', 'browseonly'] ) \u2013 When adding record pointer values, default or null = show both add and browse, otherwise only allow add or only allow browse-for-existing rst_PointerBrowseFilter ( Optional [ str ] ) \u2013 When adding record pointer values, defines a Heurist filter to restrict the list of target records browsed rst_OrderForThumbnailGeneration ( Optional [ str ] ) \u2013 Priority order of fields to use in generating thumbnail, null = do not use rst_TermIDTreeNonSelectableIDs ( Optional [ str ] ) \u2013 Term IDs to use as non-selectable headers for this field rst_ShowDetailCertainty ( bool ) \u2013 When editing the field, allow editng of the dtl_Certainty value (off by default) rst_ShowDetailAnnotation ( bool ) \u2013 When editing the field, allow editng of the dtl_Annotation value (off by default) rst_NumericLargestValueUsed ( Optional [ int ] ) \u2013 For numeric fields, Null = no auto increment, 0 or more indicates largest value used so far. Set to 0 to switch on incrementing rst_EntryMask ( Optional [ str ] ) \u2013 Data entry mask, use to control decimals on numeric values, content of text fields etc. for this record type - future implementation Aug 2017 rst_Modified ( datetime ) \u2013 Date of last modification of this record, used to get last updated date for table rst_LocallyModified ( int ) \u2013 Flags a definition element which has been modified relative to the original source rst_SemanticReferenceURL ( Optional [ str ] ) \u2013 The URI to a semantic definition or web page describing this field used within this record type rst_TermsAsButtons ( bool ) \u2013 If 1, term list fields are represented as buttons (if single value) or checkboxes (if repeat values)","title":"RST"},{"location":"reference/models/rtg/","text":"rtg # Classes: RTG \u2013 Dataclass to model one of the database's Record Type Groups. A Record Type Group categorizes the record types in the database. RTG # Bases: BaseXmlModel Dataclass to model one of the database's Record Type Groups. A Record Type Group categorizes the record types in the database. When possible, the attribute descriptions are taken from Heurist's source code. Attributes: rtg_ID ( int ) \u2013 Description . rtg_Name ( str ) \u2013 Description . rtg_Domain ( str ) \u2013 Description . rtg_Description ( Optional [ str ] ) \u2013 Description . rtg_Modified ( datetime ) \u2013 Description .","title":"rtg"},{"location":"reference/models/rtg/#models.rtg","text":"Classes: RTG \u2013 Dataclass to model one of the database's Record Type Groups. A Record Type Group categorizes the record types in the database.","title":"rtg"},{"location":"reference/models/rtg/#models.rtg.RTG","text":"Bases: BaseXmlModel Dataclass to model one of the database's Record Type Groups. A Record Type Group categorizes the record types in the database. When possible, the attribute descriptions are taken from Heurist's source code. Attributes: rtg_ID ( int ) \u2013 Description . rtg_Name ( str ) \u2013 Description . rtg_Domain ( str ) \u2013 Description . rtg_Description ( Optional [ str ] ) \u2013 Description . rtg_Modified ( datetime ) \u2013 Description .","title":"RTG"},{"location":"reference/models/rty/","text":"rty # Classes: RTY \u2013 Dataclass to model one of the database's Record Types. A Record Type is the schema for an entity in the database. RTY # Bases: BaseXmlModel Dataclass to model one of the database's Record Types. A Record Type is the schema for an entity in the database. When possible, the attribute descriptions are taken from Heurist's source code. Attributes: rty_ID ( int ) \u2013 Record type code, widely used to reference record types, primary key rty_Name ( str ) \u2013 The name which is used to describe this record (object) type rty_OrderInGroup ( int ) \u2013 Ordering within record type display groups for pulldowns rty_Description ( str ) \u2013 Description of this record type rty_TitleMask ( str ) \u2013 Mask to build a composite title by combining field values rty_CanonicalTitleMask ( str ) \u2013 Version of the mask converted to detail codes for processing rty_Plural ( Optional [ str ] ) \u2013 Plural form of the record type name, manually entered rty_Status ( Literal ['reserved', 'approved', 'pending', 'open'] ) \u2013 Reserved Heurist codes, approved/pending by ''Board'', and user additions rty_OriginatingDBID ( Optional [ int ] ) \u2013 Database where this record type originated, 0 = locally rty_NameInOriginatingDB ( Optional [ str ] ) \u2013 (Optional[str]) Name used in database where this record type originated rty_IDInOriginatingDB ( Optional [ int ] ) \u2013 ID in database where this record type originated rty_NonOwnerVisibility ( Literal ['hidden', 'viewable', 'public', 'pending'] ) \u2013 Allows blanket restriction of visibility of a particular record type rty_ShowInLists ( bool ) \u2013 Flags if record type is to be shown in end-user interface, 1=yes rty_RecTypeGroupID ( int ) \u2013 Record type group to which this record type belongs rty_RecTypeModelIDs ( str ) \u2013 The model group(s) to which this rectype belongs, comma sep. list rty_FlagAsFieldset ( bool ) \u2013 0 = full record type, 1 = Fieldset = set of fields to include in other rectypes rty_ReferenceURL ( Optional [ str ] ) \u2013 A semantic reference URI for, or a URL describing, the record type rty_AlternativeRecEditor ( Optional [ str ] ) \u2013 Name or URL of alternative record editor function to be used for this rectype rty_Type ( Literal ['normal', 'relationship', 'dummy'] ) \u2013 Use to flag special record types to trigger special functions rty_ShowURLOnEditForm ( bool ) \u2013 Determines whether special URL field is shown at the top of the edit form rty_ShowDescriptionOnEditForm ( bool ) \u2013 Determines whether the record type description field is shown at the top of the edit form rty_Modified ( datetime ) \u2013 Date of last modification of this record, used to get last updated date for table rty_LocallyModified ( bool ) \u2013 Flags a definition element which has been modified relative to the original source","title":"rty"},{"location":"reference/models/rty/#models.rty","text":"Classes: RTY \u2013 Dataclass to model one of the database's Record Types. A Record Type is the schema for an entity in the database.","title":"rty"},{"location":"reference/models/rty/#models.rty.RTY","text":"Bases: BaseXmlModel Dataclass to model one of the database's Record Types. A Record Type is the schema for an entity in the database. When possible, the attribute descriptions are taken from Heurist's source code. Attributes: rty_ID ( int ) \u2013 Record type code, widely used to reference record types, primary key rty_Name ( str ) \u2013 The name which is used to describe this record (object) type rty_OrderInGroup ( int ) \u2013 Ordering within record type display groups for pulldowns rty_Description ( str ) \u2013 Description of this record type rty_TitleMask ( str ) \u2013 Mask to build a composite title by combining field values rty_CanonicalTitleMask ( str ) \u2013 Version of the mask converted to detail codes for processing rty_Plural ( Optional [ str ] ) \u2013 Plural form of the record type name, manually entered rty_Status ( Literal ['reserved', 'approved', 'pending', 'open'] ) \u2013 Reserved Heurist codes, approved/pending by ''Board'', and user additions rty_OriginatingDBID ( Optional [ int ] ) \u2013 Database where this record type originated, 0 = locally rty_NameInOriginatingDB ( Optional [ str ] ) \u2013 (Optional[str]) Name used in database where this record type originated rty_IDInOriginatingDB ( Optional [ int ] ) \u2013 ID in database where this record type originated rty_NonOwnerVisibility ( Literal ['hidden', 'viewable', 'public', 'pending'] ) \u2013 Allows blanket restriction of visibility of a particular record type rty_ShowInLists ( bool ) \u2013 Flags if record type is to be shown in end-user interface, 1=yes rty_RecTypeGroupID ( int ) \u2013 Record type group to which this record type belongs rty_RecTypeModelIDs ( str ) \u2013 The model group(s) to which this rectype belongs, comma sep. list rty_FlagAsFieldset ( bool ) \u2013 0 = full record type, 1 = Fieldset = set of fields to include in other rectypes rty_ReferenceURL ( Optional [ str ] ) \u2013 A semantic reference URI for, or a URL describing, the record type rty_AlternativeRecEditor ( Optional [ str ] ) \u2013 Name or URL of alternative record editor function to be used for this rectype rty_Type ( Literal ['normal', 'relationship', 'dummy'] ) \u2013 Use to flag special record types to trigger special functions rty_ShowURLOnEditForm ( bool ) \u2013 Determines whether special URL field is shown at the top of the edit form rty_ShowDescriptionOnEditForm ( bool ) \u2013 Determines whether the record type description field is shown at the top of the edit form rty_Modified ( datetime ) \u2013 Date of last modification of this record, used to get last updated date for table rty_LocallyModified ( bool ) \u2013 Flags a definition element which has been modified relative to the original source","title":"RTY"},{"location":"reference/models/trm/","text":"trm # Classes: TRM \u2013 Dataclass to model one of the database's vocabulary terms. TRM # Bases: BaseXmlModel Dataclass to model one of the database's vocabulary terms. When possible, the attribute descriptions are taken from Heurist's source code.","title":"trm"},{"location":"reference/models/trm/#models.trm","text":"Classes: TRM \u2013 Dataclass to model one of the database's vocabulary terms.","title":"trm"},{"location":"reference/models/trm/#models.trm.TRM","text":"Bases: BaseXmlModel Dataclass to model one of the database's vocabulary terms. When possible, the attribute descriptions are taken from Heurist's source code.","title":"TRM"},{"location":"reference/models/utils/","text":"utils # Module for utilities commonly used by XML parsers in schemas. Functions: split_ids \u2013 Function for converting a string representation of a list of quoted integers into a Python list object. split_ids # split_ids ( input : str ) -> list Function for converting a string representation of a list of quoted integers into a Python list object. Examples: >>> s = \"3001,3110,3113,3288\" >>> split_ids ( s ) [3001, 3110, 3113, 3288] >>> s = '[ \\\" 3001 \\\" , \\\" 3110 \\\" , \\\" 3113 \\\" , \\\" 3288 \\\" ]' >>> split_ids ( s ) [3001, 3110, 3113, 3288] >>> l = [ '[ \\\" 3001 \\\" , \\\" 3110 \\\" , \\\" 3113 \\\" , \\\" 3288 \\\" ]' ] >>> split_ids ( l ) [3001, 3110, 3113, 3288] >>> s = '[]' >>> split_ids ( s ) [] Parameters: input ( str | Any ) \u2013 List of integers. Returns: list ( list ) \u2013 description","title":"utils"},{"location":"reference/models/utils/#models.utils","text":"Module for utilities commonly used by XML parsers in schemas. Functions: split_ids \u2013 Function for converting a string representation of a list of quoted integers into a Python list object.","title":"utils"},{"location":"reference/models/utils/#models.utils.split_ids","text":"split_ids ( input : str ) -> list Function for converting a string representation of a list of quoted integers into a Python list object. Examples: >>> s = \"3001,3110,3113,3288\" >>> split_ids ( s ) [3001, 3110, 3113, 3288] >>> s = '[ \\\" 3001 \\\" , \\\" 3110 \\\" , \\\" 3113 \\\" , \\\" 3288 \\\" ]' >>> split_ids ( s ) [3001, 3110, 3113, 3288] >>> l = [ '[ \\\" 3001 \\\" , \\\" 3110 \\\" , \\\" 3113 \\\" , \\\" 3288 \\\" ]' ] >>> split_ids ( l ) [3001, 3110, 3113, 3288] >>> s = '[]' >>> split_ids ( s ) [] Parameters: input ( str | Any ) \u2013 List of integers. Returns: list ( list ) \u2013 description","title":"split_ids"},{"location":"reference/schema/json_tools/converter/","text":"converter #","title":"converter"},{"location":"reference/schema/json_tools/converter/#schema.json_tools.converter","text":"","title":"converter"},{"location":"reference/schema/json_tools/models/","text":"models #","title":"models"},{"location":"reference/schema/json_tools/models/#schema.json_tools.models","text":"","title":"models"},{"location":"reference/sql/sql_safety/","text":"sql_safety # Classes: SafeSQLName \u2013 SafeSQLName # SafeSQLName () Methods: create_column_name \u2013 summary create_table_name \u2013 summary remove_characters \u2013 Simplify and remove undesirable characters from a string. create_column_name # create_column_name ( field_name : str , field_type : str ) -> str summary Parameters: field_name ( str ) \u2013 description field_type ( str ) \u2013 description Returns: str ( str ) \u2013 description create_table_name # create_table_name ( record_name : str ) -> str summary Examples: heurist_name = \"Sequence\" SafeSQLName().create_table_name(heurist_name) 'SequenceTable' Parameters: record_name ( str ) \u2013 description Returns: str ( str ) \u2013 description remove_characters classmethod # remove_characters ( s : str ) -> str Simplify and remove undesirable characters from a string. Examples: s = \"Author or Creator (Person, Organization)\" SafeSQLName.remove_characters(s) 'Author or Creator' s = \"Status_trad_freetext\" SafeSQLName.remove_characters(s) 'Status_trad_freetext' Parameters: s ( str ) \u2013 Input string. Returns: str ( str ) \u2013 Cleaned string.","title":"sql_safety"},{"location":"reference/sql/sql_safety/#sql.sql_safety","text":"Classes: SafeSQLName \u2013","title":"sql_safety"},{"location":"reference/sql/sql_safety/#sql.sql_safety.SafeSQLName","text":"SafeSQLName () Methods: create_column_name \u2013 summary create_table_name \u2013 summary remove_characters \u2013 Simplify and remove undesirable characters from a string.","title":"SafeSQLName"},{"location":"reference/sql/sql_safety/#sql.sql_safety.SafeSQLName.create_column_name","text":"create_column_name ( field_name : str , field_type : str ) -> str summary Parameters: field_name ( str ) \u2013 description field_type ( str ) \u2013 description Returns: str ( str ) \u2013 description","title":"create_column_name"},{"location":"reference/sql/sql_safety/#sql.sql_safety.SafeSQLName.create_table_name","text":"create_table_name ( record_name : str ) -> str summary Examples: heurist_name = \"Sequence\" SafeSQLName().create_table_name(heurist_name) 'SequenceTable' Parameters: record_name ( str ) \u2013 description Returns: str ( str ) \u2013 description","title":"create_table_name"},{"location":"reference/sql/sql_safety/#sql.sql_safety.SafeSQLName.remove_characters","text":"remove_characters ( s : str ) -> str Simplify and remove undesirable characters from a string. Examples: s = \"Author or Creator (Person, Organization)\" SafeSQLName.remove_characters(s) 'Author or Creator' s = \"Status_trad_freetext\" SafeSQLName.remove_characters(s) 'Status_trad_freetext' Parameters: s ( str ) \u2013 Input string. Returns: str ( str ) \u2013 Cleaned string.","title":"remove_characters"},{"location":"reference/utils/rel_to_dict_array/","text":"rel_to_dict_array #","title":"rel_to_dict_array"},{"location":"reference/utils/rel_to_dict_array/#utils.rel_to_dict_array","text":"","title":"rel_to_dict_array"},{"location":"usage/","text":"","title":"Index"},{"location":"usage/recipes/","text":"","title":"Recipes"},{"location":"usage/troubleshooting/","text":"","title":"Troubleshooting"}]}